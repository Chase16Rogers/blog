(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{505:function(e,t,a){"use strict";a.r(t);var r=a(2),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"day-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#day-4"}},[e._v("#")]),e._v(" Day 4")]),e._v(" "),a("p",[a("strong",[e._v("12/17/20")])]),e._v(" "),a("h2",{attrs:{id:"the-observer-fix"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-observer-fix"}},[e._v("#")]),e._v(" The observer fix")]),e._v(" "),a("p",[e._v("Whenever a change is made that needs to draw to the page, you'd have to go through and figure out each instance that it would need to draw.  But with an observer it allows for the draw to run whenever a particular requirement is met, be it a change to whatever object is being referenced or user input. This allows for not only cleaner, more organized code, but also makes writing more efficient.")]),e._v(" "),a("h2",{attrs:{id:"mechanisms-of-observation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mechanisms-of-observation"}},[e._v("#")]),e._v(" Mechanisms of observation")]),e._v(" "),a("p",[e._v("The Subscribe method is how you add events to an Object ().push). The Unsubscribe method is how you remove events from an object(.filter). Finally the broadcast method executes events (.forEach).")]),e._v(" "),a("h2",{attrs:{id:"the-magic-of-proxystate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-magic-of-proxystate"}},[e._v("#")]),e._v(" The magic of ProxyState")]),e._v(" "),a("p",[e._v("The ProxyState generated by BCW-create, very simply, attatches a Set to the object, this set includes the function we want to run when a change is made. After several failsafes and checks to make it usuable, it will run the code whenever the set is triggered by a change being made to whatever it is watching.")])])}),[],!1,null,null,null);t.default=s.exports}}]);